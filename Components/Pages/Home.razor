@page "/"
@using MudBlazor

<h1>Dashboard</h1>

<!-- Income and Expense Summary -->
<div class="alert alert-info d-flex justify-content-between align-items-center">
    <span>Total Income: @TotalIncome</span>
    <span>Total Expense: @TotalExpense</span>
    <span>Remaining Balance: @RemainingBalance</span>
</div>

<!-- Highest and Lowest Income -->
<div class="alert alert-success d-flex justify-content-between align-items-center">
    <span>Highest Income: @HighestIncome</span>
    <span>Lowest Income: @LowestIncome</span>
</div>

<!-- Highest and Lowest Expense -->
<div class="alert alert-warning d-flex justify-content-between align-items-center">
    <span>Highest Expense: @HighestExpense</span>
    <span>Lowest Expense: @LowestExpense</span>
</div>

<!-- Debt Summary -->
<div class="alert alert-info d-flex justify-content-between align-items-center">
    <span>Total Debt: @TotalDebt</span>
    <span>Cleared Debt: @ClearedDebt</span>
    <span>Remaining Debt: @RemainingDebt</span>
</div>

<!-- Highest and Lowest Debt -->
<div class="alert alert-danger d-flex justify-content-between align-items-center">
    <span>Highest Debt: @HighestDebt</span>
    <span>Lowest Debt: @LowestDebt</span>
</div>

<!-- Income, Expense & Debt Chart -->
<div class="col-md-6">
    <div class="dashboard-card text-white text-center">
        <h3>Income, Expense & Debt Chart</h3>
        <MudPaper Class="pa-4" Style="background-color: blue; color: white;">
            <MudChart ChartType="ChartType.Pie" InputData="@chartData" InputLabels="@chartLabels" Width="300px" Height="300px" />
        </MudPaper>
    </div>
</div>

@code {
    // Properties for financial summaries
    private decimal TotalIncome = 0;        // Total income
    private decimal TotalExpense = 0;       // Total expenses
    private decimal RemainingBalance = 0;   // Remaining balance
    private decimal HighestIncome = 0;      // Highest income amount
    private decimal LowestIncome = 0;       // Lowest income amount
    private decimal HighestExpense = 0;     // Highest expense amount
    private decimal LowestExpense = 0;      // Lowest expense amount

    // Properties for debt summaries
    private decimal TotalDebt = 0;          // Total debt
    private decimal ClearedDebt = 0;        // Total cleared debt
    private decimal RemainingDebt = 0;      // Remaining debt
    private decimal HighestDebt = 0;        // Highest debt amount
    private decimal LowestDebt = 0;         // Lowest debt amount

    // Chart data and labels
    private double[] chartData;             // Data to be used in the chart
    private string[] chartLabels = { "Total Income", "Total Expense", "Total Debt" }; // Labels for the chart

    // Called during component initialization
    protected override void OnInitialized()
    {
        LoadTransactions();  // Load and calculate transaction totals
        LoadDebts();         // Load and calculate debt totals
    }

    // Load transactions from the service and calculate totals
    private void LoadTransactions()
    {
        var transactions = TransactionService.GetTransactions();  // Fetch transactions
        CalculateTransactionTotals(transactions);                // Calculate totals
    }

    // Load debts from the service and calculate totals
    private void LoadDebts()
    {
        var debts = DebtService.GetDebts();  // Fetch debts
        CalculateDebtTotals(debts);         // Calculate totals
    }

    // Calculate totals for transactions
    private void CalculateTransactionTotals(List<Transactionitem> transactions)
    {
        // Calculate total income and total expenses
        TotalIncome = transactions.Where(t => t.transactionType == "Income").Sum(t => t.transactionAmount);
        TotalExpense = transactions.Where(t => t.transactionType == "Expense").Sum(t => t.transactionAmount);

        // Calculate remaining balance
        RemainingBalance = TotalIncome - TotalExpense;

        // Determine highest and lowest income amounts
        var incomes = transactions.Where(t => t.transactionType == "Income").Select(t => t.transactionAmount).ToList();
        if (incomes.Any())
        {
            HighestIncome = incomes.Max();
            LowestIncome = incomes.Min();
        }

        // Determine highest and lowest expense amounts
        var expenses = transactions.Where(t => t.transactionType == "Expense").Select(t => t.transactionAmount).ToList();
        if (expenses.Any())
        {
            HighestExpense = expenses.Max();
            LowestExpense = expenses.Min();
        }

        // Update chart data to reflect the current totals
        UpdateChartData();
    }

    // Calculate totals for debts
    private void CalculateDebtTotals(List<Debtitem> debts)
    {
        // Calculate total debt and cleared debt
        TotalDebt = debts.Sum(d => d.DebtAmount);
        ClearedDebt = debts.Where(d => d.Status == "Paid").Sum(d => d.DebtAmount);

        // Calculate remaining debt
        RemainingDebt = TotalDebt - ClearedDebt;

        // Determine highest and lowest debt amounts
        var debtAmounts = debts.Select(d => d.DebtAmount).ToList();
        if (debtAmounts.Any())
        {
            HighestDebt = debtAmounts.Max();
            LowestDebt = debtAmounts.Min();
        }

        // Update chart data to reflect the current totals
        UpdateChartData();
    }

    // Update the chart data with the current financial summaries
    private void UpdateChartData()
    {
        chartData = new double[] { (double)TotalIncome, (double)TotalExpense, (double)TotalDebt };
    }
}
