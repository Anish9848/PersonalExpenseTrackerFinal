@page "/debt"
<h1>Debts</h1>

<!-- Filter and Search Inputs -->
<div class="d-flex justify-content-end mb-3">
    <div class="me-3">
        <input type="text" @bind="SearchSource" @oninput="SearchDebts" class="form-control" placeholder="Search by Source" />
    </div>
    <div>
        <button @onclick="ToggleFilterPopup" class="btn btn-primary">Filter</button>
    </div>
</div>

<!-- Button to Toggle the Add Debt Form -->
<button @onclick="ToggleFormVisibility" class="btn btn-primary add-debt-button position-fixed bottom-0 end-0 m-3">
    Add Debt
</button>

<!-- Modal for Add Debt -->
@if (ShowForm)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((DebtToEdit == null) ? "Add Debt" : "Edit Debt")</h5>
                    <button type="button" class="btn-close" @onclick="ToggleFormVisibility"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(WarningMessage))
                    {
                        <div class="alert alert-warning" role="alert">
                            @WarningMessage
                        </div>
                    }
                    <div class="mb-3">
                        <label for="Source" class="form-label">Source</label>
                        <input id="Source" @bind="NewSource" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount</label>
                        <input id="amount" @bind="NewDebtAmount" type="number" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="takenDate" class="form-label">Debt Taken Date</label>
                        <input id="takenDate" @bind="NewDebtTakenDate" type="date" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="dueDate" class="form-label">Debt Due Date</label>
                        <input id="dueDate" @bind="NewDebtDueDate" type="date" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button @onclick="AddOrUpdateDebt" class="btn btn-primary">@((DebtToEdit == null) ? "Add Debt" : "Update Debt")</button>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleFormVisibility">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal for Date Filter -->
@if (ShowFilterPopup)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Filter Debts</h5>
                    <button type="button" class="btn-close" @onclick="ToggleFilterPopup"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="filterStartDate" class="form-label">Start Date</label>
                        <input type="date" id="filterStartDate" @bind="FilterStartDate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="filterEndDate" class="form-label">End Date</label>
                        <input type="date" id="filterEndDate" @bind="FilterEndDate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="filterStatus" class="form-label">Select Status</label>
                        <select id="filterStatus" @bind="FilterStatus" class="form-control">
                            <option value="">All</option>
                            <option value="Pending">Pending</option>
                            <option value="Paid">Paid</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button @onclick="FilterDebts" class="btn btn-primary">Apply Filter</button>
                    <button @onclick="ClearFilter" class="btn btn-secondary">Clear</button>
                    <button type="button" class="btn btn-secondary" @onclick="ToggleFilterPopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal for Paying Debt -->
@if (ShowPayPopup)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Pay Debt</h5>
                    <button type="button" class="btn-close" @onclick="TogglePayPopup"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(PayWarningMessage))
                    {
                        <div class="alert alert-warning" role="alert">
                            @PayWarningMessage
                        </div>
                    }
                    <div class="mb-3">
                        <label for="payAmount" class="form-label">Amount to Pay</label>
                        <input id="payAmount" @bind="PayAmount" type="number" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button @onclick="PayDebt" class="btn btn-primary">Pay</button>
                    <button type="button" class="btn btn-secondary" @onclick="TogglePayPopup">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Debt Table -->
<table class="table table-striped mt-4">
    <thead class="table-dark">
        <tr>
            <th>S.No.</th>
            <th>Source</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Amount</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var debt in FilteredDebts.Select((debt, index) => new { debt, index }))
        {
            <tr>
                <td>@(debt.index + 1)</td>
                <td>@debt.debt.DebtSource</td>
                <td>@debt.debt.DebtTakenDate.ToShortDateString() - @debt.debt.DebtDueDate.ToShortDateString()</td>
                <td>@debt.debt.Status</td>
                <td>@debt.debt.DebtAmount</td>
                <td>
                    <button @onclick="() => EditDebt(debt.debt)" class="btn btn-success btn-sm">Edit</button>
                    <button @onclick="() => ShowPayDebtPopup(debt.debt)" class="btn btn-primary btn-sm">Pay</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Debtitem> Debts = new();
    private List<Debtitem> FilteredDebts = new();
    private string NewSource = string.Empty;
    private decimal NewDebtAmount;
    private DateTime NewDebtTakenDate = DateTime.Now;
    private DateTime NewDebtDueDate = DateTime.Now;
    private bool ShowForm = false;
    private bool ShowPayPopup = false;
    private bool ShowFilterPopup = false;
    private Debtitem? DebtToEdit;
    private Debtitem? DebtToPay;
    private decimal PayAmount;
    private string? WarningMessage;
    private string? PayWarningMessage;
    private DateTime? FilterStartDate;
    private DateTime? FilterEndDate;
    private string FilterStatus = string.Empty;
    private string SearchSource = string.Empty;

    protected override void OnInitialized()
    {
        LoadDebts();
    }

    private void ToggleFormVisibility()
    {
        ShowForm = !ShowForm;
        if (!ShowForm)
        {
            ClearForm();
        }
    }

    private void TogglePayPopup()
    {
        ShowPayPopup = !ShowPayPopup;
        if (!ShowPayPopup)
        {
            PayAmount = 0;
            PayWarningMessage = string.Empty;
        }
    }

    private void ToggleFilterPopup()
    {
        ShowFilterPopup = !ShowFilterPopup;
    }

    private void AddOrUpdateDebt()
    {
        // Check if any required fields are empty
        if (string.IsNullOrEmpty(NewSource) || NewDebtAmount <= 0 || NewDebtTakenDate == default || NewDebtDueDate == default)
        {
            WarningMessage = "Please fill in all fields!";
            return;
        }

        if (DebtToEdit == null)
        {
            // Add a new debt
            DebtService.AddDebt(new Debtitem
                {
                    DebtSource = NewSource,
                    DebtAmount = NewDebtAmount,
                    DebtDueDate = NewDebtDueDate,
                    DebtTakenDate = NewDebtTakenDate,
                    Status = "Pending"
                });
        }
        else
        {
            // Update existing debt
            DebtToEdit.DebtSource = NewSource;
            DebtToEdit.DebtAmount = NewDebtAmount;
            DebtToEdit.DebtDueDate = NewDebtDueDate;
            DebtToEdit.DebtTakenDate = NewDebtTakenDate;
            DebtToEdit.Status = "Pending";
            DebtService.UpdateDebt(DebtToEdit);
            DebtToEdit = null;
        }

        LoadDebts();
        ClearForm();
        ShowForm = false;
        WarningMessage = string.Empty; // Clear any warning message after adding/updating
    }

    private void EditDebt(Debtitem debt)
    {
        DebtToEdit = debt;
        NewSource = debt.DebtSource;
        NewDebtAmount = debt.DebtAmount;
        NewDebtTakenDate = debt.DebtTakenDate;
        NewDebtDueDate = debt.DebtDueDate;
        ShowForm = true;
    }

    private void ShowPayDebtPopup(Debtitem debt)
    {
        DebtToPay = debt;
        ShowPayPopup = true;
    }

    private void PayDebt()
    {
        if (DebtToPay != null)
        {
            if (PayAmount <= 0 || PayAmount > DebtToPay.DebtAmount)
            {
                PayWarningMessage = "Amount is greater than the debt amount!";
                return;
            }

            DebtToPay.DebtAmount -= PayAmount;
            if (DebtToPay.DebtAmount == 0)
            {
                DebtToPay.Status = "Paid";
            }

            DebtService.UpdateDebt(DebtToPay);
            LoadDebts();
            ShowPayPopup = false;
            DebtToPay = null;
            PayAmount = 0;
            PayWarningMessage = string.Empty; // Clear any warning message after payment
        }
    }

    private void LoadDebts()
    {
        Debts = DebtService.GetDebts();
        FilteredDebts = Debts; // Initialize FilteredDebts
    }

    private void ClearForm()
    {
        NewSource = string.Empty;
        NewDebtAmount = 0;
        NewDebtTakenDate = DateTime.Now;
        NewDebtDueDate = DateTime.Now;
        DebtToEdit = null;
        WarningMessage = string.Empty;
    }

    private void FilterDebts()
    {
        FilteredDebts = Debts;

        if (FilterStartDate.HasValue && FilterEndDate.HasValue)
        {
            FilteredDebts = FilteredDebts.Where(d => d.DebtTakenDate >= FilterStartDate.Value && d.DebtTakenDate <= FilterEndDate.Value).ToList();
        }

        if (!string.IsNullOrEmpty(FilterStatus))
        {
            FilteredDebts = FilteredDebts.Where(d => d.Status == FilterStatus).ToList();
        }

        ShowFilterPopup = false; // Close the filter popup after applying the filter
    }

    private void ClearFilter()
    {
        FilterStartDate = null;
        FilterEndDate = null;
        FilterStatus = string.Empty;
        FilteredDebts = Debts;
    }

    private void SearchDebts(ChangeEventArgs e)
    {
        SearchSource = e.Value.ToString();
        if (!string.IsNullOrEmpty(SearchSource))
        {
            FilteredDebts = Debts.Where(d => d.DebtSource.Contains(SearchSource, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            FilteredDebts = Debts;
        }
    }
}